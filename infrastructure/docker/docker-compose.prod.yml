version: "3.9"

name: service-provider-prod

services:
  web-app:
    build:
      context: ./src/web
      dockerfile: infrastructure/docker/web-app.dockerfile
      target: production
      args:
        NODE_ENV: production
    image: service-provider/web-app:${APP_VERSION:-latest}
    environment:
      - NODE_ENV=production
      - API_URL=http://api-gateway
      - VUE_APP_VERSION=${APP_VERSION:-1.0.0}
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - service-provider-network
    depends_on:
      - api-gateway

  api-gateway:
    build:
      context: ./src/backend
      dockerfile: infrastructure/docker/api-gateway.dockerfile
      args:
        ASPNETCORE_ENVIRONMENT: Production
    image: service-provider/api-gateway:${APP_VERSION:-latest}
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD}
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ApplicationInsights__InstrumentationKey=${APPINSIGHTS_KEY}
    ports:
      - "5000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - service-provider-network
    depends_on:
      - redis

  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - service-provider-network

volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind

networks:
  service-provider-network:
    driver: bridge
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16